{"version":3,"sources":["spotify-icons-logos/icons/02_CMYK/02_PNG/Spotify_Icon_CMYK_White.png","components/Header.jsx","components/PlaylistForm.jsx","components/Checkbox.jsx","components/MoodForm.jsx","components/GoButton.jsx","components/LogInButton.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Title","styled","div","Description","Wrapper","Header","this","props","loggedIn","Component","Form","select","Option","option","PlaylistForm","state","value","handleChange","bind","event","handlePlaylistChange","onChange","name","titles","map","item","id","Input","input","Checkbox","type","checked","Label","Text","span","MoodForm","checkedItems","Map","e","handleMoodChange","moods","get","React","button","GoButton","onClick","LogIn","a","LogInButton","alt","src","BlackAndWhiteLogo","style","width","href","spotifyWebAPI","SpotifyWebAPI","FormWrapper","isMobile","key","label","App","params","getHashParams","access_token","setAccessToken","userID","getUsername","playlists","selectedPlaylistSongs","chosenPlaylist","numCreated","getSavedSongs","updateWindowDimensions","getPlaylists","window","addEventListener","removeEventListener","innerWidth","setState","hashParams","r","q","location","hash","substring","exec","decodeURIComponent","getMe","then","response","getUserPlaylists","playlist","items","concat","length","tracks","total","console","log","limit","offset","getMySavedTracks","song","track","uri","playlistID","result","find","obj","numCalls","Math","ceil","idCalls","i","push","Promise","all","index","getPlaylistTracks","arr","sortSongs","songIDs","hundred","songID","getAudioFeaturesForTracks","mood","chillURIs","hypeURIs","goodVibesURIs","bagURIs","audio_features","energy","danceability","valence","moodNames","createPlaylist","description","bagURI","addTracksToPlaylist","hypeURI","goodVibesURI","chillURI","target","isChecked","prevState","set","options","selectedIndex","innerHTML","getPlaylistSongs","className","goButtonClicked","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f67cbd74.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Spotify_Icon_CMYK_White.d0d7f784.png\";","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nconst Title = styled.div`\n    font-size: 45px;\n    padding-bottom: 5px;\n`;\n\nconst Description = styled.div`\n    font-size: 18px;\n    padding-bottom: 5px;\n`;\n\nconst Wrapper = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    font-family: Andale Mono, monospace;\n`;\n\nclass Header extends Component {\n    render() {\n        if(this.props.loggedIn) {\n            return(\n                <Wrapper>\n                    <Title>mood-sort</Title>\n                    <Description>sort large, unkept playlists into smaller playlists by mood</Description>\n                </Wrapper>\n            );\n        } else {\n            return(\n                <Wrapper>\n                    <Title>mood-sort</Title>\n                    <Description>sort large, unkept playlists into smaller playlists by mood</Description>\n                    <br></br><br></br>\n                    <Description>log into spotify to get started</Description>\n                </Wrapper>\n            );\n        }\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 10px;\n  margin-right: 100px;\n`;\n\nconst Form = styled.select`\n  cursor: pointer;\n  border-radius: 10px;\n  padding: 5px;\n  background-color: #BBBEFF;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\n  font-size: 14px;\n  :focus {\n    outline: none;\n  }\n`;\n\nconst Option = styled.option`\n  cursor: pointer;\n  background-color: #BBBEFF;\n  border-radius: 10px;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\n  font-size:  14px;\n  `;\n\nclass PlaylistForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: this.props.value\n        }\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event) {\n        this.props.handlePlaylistChange(event);\n    }\n\n    render() {\n        return (\n          <Wrapper>\n                <Form value={this.props.value} onChange={this.handleChange}>\n                  <Option value = ''>Choose a Playlist</Option>\n                  <Option name = \"liked\" value=\"liked\">Liked Songs</Option>\n                  {this.props.titles.map(item => (\n                    <Option name = {item.name} value = {item.id}>{item.name}</Option>\n                 ))}\n                </Form>\n          </Wrapper>\n          );\n    }\n}\n\nexport default PlaylistForm;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Input = styled.input`\n    cursor: pointer;\n    height: 20px;\n    width: 20px;\n    :hover {\n        background-color: #BBBEFF;\n    }\n`;\n\nconst Checkbox = ({ type = 'checkbox', name, checked = false, onChange }) => (\n  <Input type={type} name={name} checked={checked} onChange={onChange} />\n);\n\nCheckbox.propTypes = {\n  type: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  checked: PropTypes.bool,\n  onChange: PropTypes.func.isRequired,\n}\n\nexport default Checkbox;","import React from 'react';\nimport Checkbox from './Checkbox.jsx';\nimport styled from 'styled-components';\n  \nconst Wrapper = styled.div``;\n\nconst Label = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 10px;\n`;\n\nconst Text = styled.span`\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\n`;\n\nclass MoodForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      checkedItems: new Map(),\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    this.props.handleMoodChange(e);\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        {\n          this.props.moods.map(item => (\n            <Label>\n              <Checkbox name={item.name} checked={this.props.checkedItems.get(item.name)} onChange={this.handleChange} />\n              <Text>{item.name}</Text>\n            </Label>\n          ))\n        }\n      </Wrapper>\n    );\n  }\n}\n\nexport default MoodForm;","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.button`\n    cursor: pointer;\n    display: flex;\n    padding: 10px;\n    justify-content: center;\n    align-items: center;\n    background-color: #424FFF;\n    width: 200px;\n    border-radius: 20px;\n    color: white;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\n    font-size: 16px;\n    margin-bottom: 20px;\n    :focus {\n        outline: none;\n      }\n    `;\n\nclass GoButton extends Component {\n    render() {\n        return(\n            <Wrapper onClick = {this.props.onClick}>\n                Sort Your Playlists!\n            </Wrapper>\n        );\n    }\n}\n\nexport default GoButton;","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport BlackAndWhiteLogo from '../spotify-icons-logos/icons/02_CMYK/02_PNG/Spotify_Icon_CMYK_White.png';\n\n\nconst LogIn = styled.a`\n    color: white;\n    text-decoration: none;\n    padding-left: 15px;\n`;\n\nconst Wrapper = styled.div`\n    display: flex;\n    padding: 10px;\n    justify-content: center;\n    align-items: center;\n    background-color: #424FFF;\n    width: 200px;\n    border-radius: 20px;\n`;\n\nclass LogInButton extends Component {\n    render() {\n        return(\n            <Wrapper>\n                <img alt = \"spotify logo\" src = {BlackAndWhiteLogo} style = {{ width: 30 }} />\n                <LogIn href = '/login'>Log in to Spotify</LogIn>\n            </Wrapper>\n        );\n    }\n}\n\nexport default LogInButton;","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport SpotifyWebAPI from 'spotify-web-api-js';\nimport Header from './components/Header.jsx';\nimport PlaylistForm from './components/PlaylistForm.jsx';\nimport MoodForm from './components/MoodForm.jsx';\nimport GoButton from './components/GoButton.jsx';\nimport LogInButton from './components/LogInButton.jsx';\n// import SortForm from './components/sortForm.jsx';\n\nconst spotifyWebAPI = new SpotifyWebAPI();\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  align-items: center;\n  margin: 50px;\n`;\n\nconst FormWrapper = styled.div`\n    display: flex;\n    flex-direction: ${props => props.isMobile ? \"column\" : \"row\" };\n    justify-content: center;\n    align-items: center;\n    align-content: center;\n    margin: 50px;\n    margin-top: 50px;\n`;\n\nvar moods = [\n  {\n    name: 'good vibes',\n    key: 1,\n    label: 'good vibes',\n  },      \n  {\n    name: 'chill',\n    key: 2,\n    label: 'chill',\n  },   \n  {\n    name: 'bag',\n    key: 3,\n    label: 'bag',\n  },   \n  {\n    name: 'hype',\n    key: 4,\n    label: 'hype',\n  },   \n]\n\nclass App extends Component {\n  constructor() {\n    super();\n    const params = this.getHashParams();\n    if(params.access_token) {\n      spotifyWebAPI.setAccessToken(params.access_token);\n    }\n\n    this.state = {\n      loggedIn: params.access_token ? true : false,\n      userID: this.getUsername(),\n      playlists: [],\n      selectedPlaylistSongs: [],\n      moods: new Map(), \n      chosenPlaylist: {},\n      numCreated: 0,\n      isMobile: false\n    }\n\n    this.handleMoodChange = this.handleMoodChange.bind(this);\n    this.handlePlaylistChange = this.handlePlaylistChange.bind(this);\n    this.getSavedSongs = this.getSavedSongs.bind(this);\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n  }\n\n  componentDidMount() {\n    this.getPlaylists();\n    this.getSavedSongs(50, 0);\n\n    this.updateWindowDimensions();\n    window.addEventListener('resize', this.updateWindowDimensions);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateWindowDimensions);\n  }\n  \n  updateWindowDimensions() {\n    if(window.innerWidth < 725) this.setState({ isMobile: true });\n    else this.setState({ isMobile: false });\n  }\n  \n\n  getHashParams() {\n    var hashParams = {};\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n    while ( e = r.exec(q)) {\n       hashParams[e[1]] = decodeURIComponent(e[2]);\n    }\n    return hashParams;\n  } \n\n  getUsername() {\n    spotifyWebAPI.getMe()\n      .then((response) => {\n        this.setState({\n          userID: response.id\n        })\n      })\n  }\n\n  getPlaylists() {\n    spotifyWebAPI.getUserPlaylists()\n      .then((response) => {\n        var playlist;\n        for(playlist of response.items) {\n            this.setState(state => {\n              const playlists = state.playlists.concat({ \n                name: playlist.name, \n                id: playlist.id,\n                length: playlist.tracks.total\n            });\n            console.log(playlist.tracks.total);\n            return {\n              playlists\n            }\n          })\n        }\n      })\n  }\n\n  getSavedSongs(limit, offset) {\n    spotifyWebAPI.getMySavedTracks({limit: limit, offset: offset})\n      .then((response) =>{\n        var song;\n        for(song of response.items) {\n          this.setState(state => {\n            const selectedPlaylistSongs = state.selectedPlaylistSongs.concat({ \n              name: song.track.name, \n              uri: song.track.uri,\n              id: song.track.id,\n            });\n\n            return {\n              selectedPlaylistSongs\n            }\n          })\n        }\n\n        if(this.state.selectedPlaylistSongs.length < response.total) this.getSavedSongs(limit, offset + limit); \n      })\n  }\n\n  //ONLY GETS FIRST 100\n\n    getPlaylistSongs(playlistID) {\n    var result = this.state.playlists.find(obj => {\n      return obj.id === playlistID;\n    })\n    var numCalls = Math.ceil(result.length / 100);\n    var idCalls = [];\n\n    for(var i = 0; i < numCalls; i++) {\n      idCalls.push(playlistID);\n    }\n    \n    Promise.all(idCalls.map((playlistID, index) =>\n    spotifyWebAPI.getPlaylistTracks('', playlistID, {offset: index * 100})))\n      .then((response) =>{\n        var song;\n        var arr;\n        for(arr of response) {\n        for(song of arr.items) {\n          this.setState(state => {\n            const selectedPlaylistSongs = state.selectedPlaylistSongs.concat({ \n              name: song.track.name, \n              uri: song.track.uri,\n              id: song.track.id,\n            });\n\n            return {\n              selectedPlaylistSongs\n            }\n          })\n        }\n      }\n        this.sortSongs();\n      })\n  }\n\n  sortSongs() { \n    var songIDs = [[]];\n    var song;\n    var hundred = 0;\n\n    for(song of this.state.selectedPlaylistSongs) {\n      if(songIDs[hundred].length === 100) {\n        hundred += 1;\n        songIDs.push([]);\n      }\n      songIDs[hundred].push(song.id);\n    }\n\n      Promise.all(songIDs.map(songID =>\n        spotifyWebAPI.getAudioFeaturesForTracks(songID)))\n        .then((response) => {\n          console.log(response);\n          var song;\n          var arr;\n          var mood;\n\n          var chillURIs = [[]];\n          var hypeURIs = [[]];\n          var goodVibesURIs = [[]];\n          var bagURIs = [[]];\n\n          for(arr of response) {\n            for(song of arr.audio_features) {\n            //console.log(song.name, \" Tempo \", response.tempo, \" Energy \", response.energy, \" Dancability \", response.danceability, \" Valence \", response.valence);\n            if(song.energy > .80 || song.danceability > .80) mood = \"hype\";\n            else if((song.energy > .65 && song.danceability > .50) && song.valence > .40) mood = \"good vibes\";\n            else if(song.valence < .50 && song.energy < .50 ) mood = \"bag\"\n            else mood = \"chill\";\n\n            if(mood === 'chill') {\n              if(chillURIs[chillURIs.length - 1].length === 100) {\n                chillURIs.push([]);\n              }\n              chillURIs[chillURIs.length - 1].push(song.uri);\n            } else if(mood === 'good vibes') {\n              if(goodVibesURIs[goodVibesURIs.length - 1].length === 100) {\n                goodVibesURIs.push([]);\n              }\n              goodVibesURIs[goodVibesURIs.length - 1].push(song.uri);\n            } else if(mood === 'bag') {\n                if(bagURIs[bagURIs.length - 1].length === 100) {\n                  bagURIs.push([]);\n                }\n                bagURIs[bagURIs.length - 1].push(song.uri);\n            } else if(mood === 'hype') {\n              if(hypeURIs[hypeURIs.length - 1].length === 100) {\n                hypeURIs.push([]);\n              }\n              hypeURIs[hypeURIs.length - 1].push(song.uri);\n            }\n          }\n        }\n\n          var moodNames = [];\n\n          for(mood of this.state.moods) {\n            if(mood[1]) {\n              moodNames.push(mood[0]);\n            }\n          }\n\n          moodNames.map(mood => {\n          spotifyWebAPI.createPlaylist(this.state.userID, {name: mood + \" songs of \" + this.state.chosenPlaylist.name, description: \"Created by mood-sort from \" + this.state.chosenPlaylist.name + \" playlist\"})\n            .then((response) =>{\n              if(mood === 'bag' && bagURIs[0].length !== 0) {\n                bagURIs.map(bagURI => {\n                spotifyWebAPI.addTracksToPlaylist('', response.id, bagURI)});\n              } else if(mood === 'hype' && hypeURIs[0].length !== 0) {\n                hypeURIs.map(hypeURI => {\n                spotifyWebAPI.addTracksToPlaylist('', response.id, hypeURI)});\n              } else if(mood === 'good vibes' && goodVibesURIs[0].length !== 0) {\n                goodVibesURIs.map(goodVibesURI => {\n                spotifyWebAPI.addTracksToPlaylist('', response.id, goodVibesURI)});\n              } else if(mood === 'chill' && chillURIs[0].length !== 0) {\n                chillURIs.map(chillURI => {\n                spotifyWebAPI.addTracksToPlaylist('', response.id, chillURI)});\n              }\n            })\n        })\n      })\n  }\n\n  handleMoodChange(e) {\n      const item = e.target.name;\n      const isChecked = e.target.checked;\n      this.setState(prevState => ({ moods: prevState.moods.set(item, isChecked) }));\n  }\n\n  handlePlaylistChange(e) {\n    const {options, selectedIndex} = e.target;\n    this.setState( { chosenPlaylist: {name: options[selectedIndex].innerHTML, id: e.target.value }} );\n  }\n\n  goButtonClicked() {\n      if(this.state.chosenPlaylist.id === 'liked') {\n        this.sortSongs();\n      } else {\n        this.setState({selectedPlaylistSongs: []});\n        this.getPlaylistSongs(this.state.chosenPlaylist.id);\n      }\n  }\n\n  render() {\n    if(this.state.loggedIn) {\n      return (\n        <Wrapper className=\"App\">\n          <Header loggedIn = {true} />\n          <FormWrapper isMobile = {this.state.isMobile}>\n            <PlaylistForm \n              titles = {this.state.playlists} \n              handlePlaylistChange = {this.handlePlaylistChange} \n              value = {this.state.chosenPlaylist.id} />\n            <MoodForm \n              moods = {moods} \n              handleMoodChange = {this.handleMoodChange} \n              checkedItems = {this.state.moods} /> \n          </FormWrapper>\n          <GoButton onClick = {() => this.goButtonClicked()} />\n        </Wrapper>\n      );\n    } else {\n        return (\n          <Wrapper className=\"App\">\n            <Header loggedIn = {false} />\n            <LogInButton />\n          </Wrapper>\n        );\n    }\n  }\n}\n\nexport default App;\n\n\n  // makeNewPlaylist(name) {\n  //   spotifyWebAPI.createPlaylist(this.state.userID, {name: name, description: \"Created by mood-sort from \" + this.state.chosenPlaylist.id + \" playlist\"})\n  //     .then((response) =>{\n  //       this.setState({\n  //         recentPlaylistID: response.id\n  //       })\n  //     });\n  // }\n\n    // addSong(songs, mood) {\n  //   spotifyWebAPI.addTracksToPlaylist('', mood, songs);\n  // }\n\n  // classifyByMood(song) {\n  //     var mood;\n  //     var playlist;\n  //     spotifyWebAPI.getAudioFeaturesForTrack(song.id)\n  //       .then((response) => {\n  //         //console.log(song.name, \" Tempo \", response.tempo, \" Energy \", response.energy, \" Dancability \", response.danceability, \" Valence \", response.valence);\n  //         if(response.danceability > .750 && response.tempo < .750) mood = \"good vibes\";\n  //         else if(response.danceability > .750) mood = \"hype\";\n  //         else if(response.tempo < 110 && response.energy < .400) mood = \"chill\";\n  //         else mood = \"bag\";\n\n  //         console.log(mood);\n          \n  //         return mood;\n  //       });\n  // }\n\n  \n  // createMoodPlaylists() {\n  //   //check mood form and create playlists in user's account accordingly\n  //   var mood;\n  //   for(mood of this.state.moods) {\n  //     if(this.makeNewPlaylist(mood[0] + \" songs from \" + this.state.chosenPlaylist.name)) {\n  //       this.setState(prevState => ({ moods: prevState.moods.set(mood[0], mood[1], true) }))\n  //     }\n  //   }\n\n  //   this.getPlaylists();\n\n  // }\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}